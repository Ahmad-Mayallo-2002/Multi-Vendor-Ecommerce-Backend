# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessToken {
  id: String!
  role: Role!
  token: String!
  vendorId: String
}

type AddToItemResponse {
  data: Boolean!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type Address {
  city: String!
  country: String!
  createdAt: DateTime!
  id: String!
  order: [Order!]!
  state: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type AddressBoolean {
  data: Boolean!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type AddressItem {
  data: Address!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type AddressesList {
  data: [Address!]!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type AvgProductReviewResponse {
  data: Float!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type AvgVendorReviewResponse {
  data: Float!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type BooleanCategory {
  data: Boolean!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type BooleanFollowingResponse {
  data: Boolean!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type Cart {
  cartItems: [CartItem!]!
  createdAt: DateTime!
  id: String!
  totalPrice: Float!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type CartItem {
  cart: Cart!
  createdAt: DateTime!
  id: String!
  priceAtPayment: Float!
  product: Product!
  quantity: Int!
  updatedAt: DateTime!
}

type CartItemResponse {
  data: CartItem!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type CartList {
  data: [Cart!]!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type CartResponse {
  data: Cart!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type Category {
  createdAt: DateTime!
  description: String!
  id: String!
  name: String!
  products: [Product!]!
  updatedAt: DateTime!
}

type CategoryList {
  data: [Category!]!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type CategryItem {
  data: Category!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

input CreateAddressInput {
  city: String!
  country: String!
  state: String!
}

input CreateCartItemInput {
  productId: String!
  quantity: Int! = 1
}

input CreateCategoryInput {
  description: String!
  name: String!
  user: String!
}

input CreateFollowingInput {
  userId: String!
  vendorId: String!
}

input CreateOrderInput {
  addressId: String!
  paymentMethod: Payment!
}

input CreateProductInput {
  categoryId: String!
  description: String!
  discount: Float!
  image: Upload!
  price: Float!
  stock: Int!
  title: String!
}

input CreateProductReviewInput {
  productId: String!
  value: Float!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

input CreateVendorInput {
  companyName: String!
  contactEmail: String!
  contactPhone: String!
  description: String!
  logo: Upload!
}

input CreateVendorReviewInput {
  value: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Following {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
  vendor: Vendor!
  vendorId: String!
}

type FollowingResponse {
  data: Following!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type FollowingsAndCount {
  count: Int!
  followings: [Following!]!
}

type FollowingsAndCountResponse {
  data: FollowingsAndCount!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addFollowing(input: CreateFollowingInput!): FollowingResponse!
  addItemToCart(input: CreateCartItemInput!): CartItemResponse!
  addProductReview(input: CreateProductReviewInput!): ProductReviewResponse!
  addVendorReview(input: CreateVendorReviewInput!, vendorId: String!): VendorReviewResponse!
  approveVendor(approve: Boolean!, vendorId: String!): VendorStringResponse!
  cancelFollowing(vendorId: String!): BooleanFollowingResponse!
  createAddress(input: CreateAddressInput!): AddressItem!
  createCategory(input: CreateCategoryInput!): CategryItem!
  createOrder(input: CreateOrderInput!): OrderItemResponse!
  createProduct(input: CreateProductInput!): String!
  login(input: LoginInput!): AccessToken!
  removeAddress(addressId: String!): AddressBoolean!
  removeCategory(categoryId: String!): BooleanCategory!
  removeItemFromCart(itemId: String!): AddToItemResponse!
  removeOrder(id: String!): OrderBoolean!
  removeProduct(productId: String!): ProductBoolean!
  removeUser: UserBoolean!
  removeVendor: VendorBooleanResponse!
  seedAdmin(userId: String!): String!
  signupUser(input: CreateUserInput!): User!
  signupVendor(user: CreateUserInput!, vendor: CreateVendorInput!): Vendor!
  updateAddress(addressId: String!, input: UpdateAddressInput!): AddressBoolean!
  updateCategory(categoryId: String!, input: UpdateCategoryInput!): CategryItem!
  updateItemCart(input: UpdateCartItemInput!, itemId: String!): AddToItemResponse!
  updateProduct(input: UpdateProductInput!, productId: String!): ProductString!
  updateUser(input: UpdateUserInput!): UserBoolean!
  updateVendor(input: UpdateVendorInput!): VendorBooleanResponse!
}

type Order {
  address: Address!
  addressId: String!
  createdAt: DateTime!
  id: String!
  orderItems: [OrderItem!]!
  payment: PaymentMethod!
  paymentId: String!
  totalPrice: Float!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type OrderBoolean {
  data: Boolean!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type OrderItem {
  createdAt: DateTime!
  id: String!
  order: Order!
  orderId: String!
  priceAtPayment: Float!
  product: Product!
  productId: String!
  quantity: Int!
  updatedAt: DateTime!
}

type OrderItemResponse {
  data: Order!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type OrderList {
  data: [Order!]!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type Pagination {
  currentPages: Int
  next: Int
  prev: Int
  totalPages: Int
}

"""Enum for Payment Method"""
enum Payment {
  CARD
  PAYPAL
  VISA
}

type PaymentMethod {
  createdAt: DateTime!
  id: String!
  method: Payment!
  order: Order!
  orderId: String!
  paymentIntentId: String!
  status: Status!
  totalPrice: Float!
  updatedAt: DateTime!
}

type Product {
  cartItems: [CartItem!]!
  category: Category!
  categoryId: String!
  createdAt: DateTime!
  description: String!
  discount: Float!
  id: String!
  image: String!
  orderItems: [OrderItem!]!
  price: Float!
  public_id: String!
  reviews: [ProductReview!]!
  stock: Int!
  title: String!
  updatedAt: DateTime!
  vendor: Vendor!
  vendorId: String!
}

type ProductBoolean {
  data: Boolean!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type ProductItem {
  data: Product!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type ProductReview {
  createdAt: DateTime!
  id: String!
  productId: String!
  updatedAt: DateTime!
  userId: String!
  value: Float!
}

type ProductReviewResponse {
  data: ProductReview!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type ProductString {
  data: String!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type ProductsList {
  data: [Product!]!
  message: String!
  pagination: Pagination!
  statusCode: Int!
}

type Query {
  getAddress(addressId: String!): AddressItem!
  getAddresses: AddressesList!
  getAllCarts: CartList!
  getAllOrders(skip: Int!, sortByCreated: Sort, take: Int!): OrderList!
  getAllUsers: UserList!
  getAverageVendorReview(vendorId: String!): AvgVendorReviewResponse!
  getAvgProductReview(productId: String!): AvgProductReviewResponse!
  getCart(id: String!): CartResponse!
  getCategories: CategoryList!
  getCategory(categoryId: String!): CategryItem!
  getProductById(id: String!): ProductItem!
  getProducts(skip: Int!, sortByCreated: Sort, sortByFollowings: Boolean = false, sortByPrice: Sort, take: Int!): ProductsList!
  getProductsByCategory(category: String!): ProductsList!
  getProductsByVendor(vendorId: String!): ProductsList!
  getSingleOrder(orderId: String!): OrderItemResponse!
  getUser: UserItem!
  getUserAddresses: AddressesList!
  getUserCart: CartResponse!
  getUserFollowings(skip: Int!, sortByCreated: Sort, take: Int!): FollowingsAndCountResponse!
  getUserOrders(skip: Int!, sortByCreated: Sort, take: Int!): OrderList!
  getVendor(vendorId: String!): VendorItem!
  getVendorFollowers(skip: Int!, sortByCreated: Sort!, take: Int!): FollowingsAndCountResponse!
  getVendors: VendorList!
  test: String!
}

"""Role Enum"""
enum Role {
  SUPER_ADMIN
  USER
  VENDOR
}

"""Enum for Sort By ASC or DESC"""
enum Sort {
  ASC
  DESC
}

"""Order Status Enum"""
enum Status {
  FAILED
  PAID
  PENDING
  REFUND
  UNPAID
}

input UpdateAddressInput {
  city: String
  country: String
  state: String
}

input UpdateCartItemInput {
  quantity: Int! = 1
}

input UpdateCategoryInput {
  description: String
  name: String
  user: String
}

input UpdateProductInput {
  data: UpdateProductInputData!
  image: Upload
}

input UpdateProductInputData {
  categoryId: String
  description: String
  discount: Float
  price: Float
  stock: Int
  title: String
}

input UpdateUserInput {
  email: String
  password: String
  username: String
}

input UpdateVendorInput {
  data: UpdateVendorInputData!
  logo: Upload
}

input UpdateVendorInputData {
  companyName: String
  contactEmail: String
  contactPhone: String
  description: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  addresses: [Address!]!
  cart: Cart!
  createdAt: DateTime!
  email: String!
  followings: [Following!]
  id: String!
  order: [Order!]!
  productReview: ProductReview!
  role: Role!
  updatedAt: DateTime!
  username: String!
  vendor: Vendor!
  vendorReview: [VendorReview!]!
}

type UserBoolean {
  data: Boolean!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type UserItem {
  data: User!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type UserList {
  data: [User!]!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type Vendor {
  companyName: String!
  contactEmail: String!
  contactPhone: String!
  createdAt: DateTime!
  description: String!
  followers: [Following!]!
  id: String!
  isApproved: Boolean!
  logo: String!
  products: [Product!]!
  public_id: String!
  reviews: [VendorReview!]!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type VendorBooleanResponse {
  data: Boolean!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type VendorItem {
  data: Vendor!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type VendorList {
  data: [Vendor!]!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type VendorReview {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  userId: String!
  value: Float!
  vendorId: String!
}

type VendorReviewResponse {
  data: VendorReview!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

type VendorStringResponse {
  data: String!
  message: String!
  pagination: Pagination
  statusCode: Int!
}

"""Total Price Scalar Stores as Cents"""
scalar price