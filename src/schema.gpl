# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessToken {
  id: String!
  role: Role!
  token: String!
}

type Address {
  city: String!
  country: String!
  createdAt: DateTime!
  id: String!
  order: Order!
  state: String!
  updatedAt: DateTime!
  user: User!
}

type Cart {
  cartItems: [CartItem!]!
  createdAt: DateTime!
  id: String!
  totalPrice: Float!
  updatedAt: DateTime!
  user: User!
}

type CartItem {
  cart: Cart!
  createdAt: DateTime!
  id: String!
  priceAtPayment: Float!
  product: Product!
  quantity: Int!
  updatedAt: DateTime!
}

type Category {
  createdAt: DateTime!
  description: String!
  id: String!
  name: String!
  products: [Product!]!
  updatedAt: DateTime!
}

input CreateAddressInput {
  city: String!
  country: String!
  state: String!
  userId: String!
}

input CreateCartInput {
  totalPrice: Float!
}

input CreateCategoryInput {
  description: String!
  name: String!
  user: String!
}

input CreateFollowingInput {
  userId: String!
  vendorId: String!
}

input CreateOrderInput {
  totalPrice: Float!
}

input CreatePaymentMethodInput {
  method: Payment!
  orderId: String!
  totalPrice: Float!
  userId: String!
}

input CreateProductInput {
  categoryId: String!
  description: String!
  discount: Float!
  image: String!
  price: Float!
  stock: Int!
  title: String!
  vendorId: String!
}

input CreateUserInput {
  email: String!
  password: String!
  role: Role! = USER
  username: String!
}

input CreateVendorInput {
  companyName: String!
  contactEmail: String!
  contactPhone: String!
  description: String!
  isApproved: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Following {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
  vendor: Vendor!
  vendorId: String!
}

type FollowingsAndCount {
  count: Int!
  followings: [Following!]!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addFollowing(input: CreateFollowingInput!): Following!
  cancelFollowing(vendorId: String!): Boolean!
  createAddress(createAddressInput: CreateAddressInput!): Address!
  createCart(createCartInput: CreateCartInput!): Cart!
  createCategory(input: CreateCategoryInput!): Category!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  createPaymentMethod(createPaymentMethodInput: CreatePaymentMethodInput!): PaymentMethod!
  createProduct(image: Upload!, input: CreateProductInput!): Product!
  login(input: LoginInput!): AccessToken!
  removeAddress(id: Int!): Address!
  removeCart(id: Int!): Cart!
  removeCategory(categoryId: String!): Boolean!
  removeOrder(id: Int!): Order!
  removePaymentMethod(id: Int!): PaymentMethod!
  removeProduct(id: String!): Boolean!
  removeUser(userId: String!): Boolean!
  removeVendor(vendorId: String!): Boolean!
  seedAdmin(userId: String!): String!
  signupUser(input: CreateUserInput!): User!
  signupVendor(logo: Upload!, user: CreateUserInput!, vendor: CreateVendorInput!): Vendor!
  updateAddress(updateAddressInput: UpdateAddressInput!): Address!
  updateCart(updateCartInput: UpdateCartInput!): Cart!
  updateCategory(categoryId: String!, input: UpdateCategoryInput!): Category!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  updatePaymentMethod(updatePaymentMethodInput: UpdatePaymentMethodInput!): PaymentMethod!
  updateProduct(id: String!, image: Upload, input: UpdateProductInput!): Product!
  updateUser(input: UpdateUserInput!, userId: String!): Boolean!
  updateVendor(input: UpdateVendorInput!, logo: Upload, vendorId: String!): Boolean!
}

type Order {
  address: Address!
  createdAt: DateTime!
  id: String!
  orderItems: [OrderItem!]!
  payment: PaymentMethod!
  totalPrice: Float!
  updatedAt: DateTime!
  user: User!
}

type OrderItem {
  createdAt: DateTime!
  id: String!
  order: Order!
  priceAtPayment: Float!
  product: Product!
  quantity: Int!
  updatedAt: DateTime!
}

"""Enum for Payment Method"""
enum Payment {
  CASH
  CREDIT_CARD
  PAYPAL
}

type PaymentMethod {
  createdAt: DateTime!
  id: String!
  method: Payment!
  order: Order!
  totalPrice: Float!
  updatedAt: DateTime!
}

type Product {
  cartItems: [CartItem!]!
  category: Category!
  categoryId: String!
  createdAt: DateTime!
  description: String!
  discount: Float!
  id: String!
  image: String!
  orderItems: [OrderItem!]!
  price: Float!
  stock: Int!
  title: String!
  updatedAt: DateTime!
  vendor: Vendor!
}

type Query {
  address(id: Int!): Address!
  addresses: [Address!]!
  cart(id: Int!): Cart!
  getAllUsers: [User!]!
  getCategories: [Category!]!
  getCategory(categoryId: String!): Category!
  getProductById(id: String!): Product!
  getProducts: [Product!]!
  getProductsByCategory(category: String!): [Product!]!
  getProductsByVendor(vendorId: String!): [Product!]!
  getUser(userId: String!): User!
  getUserFollowings(userId: String!): FollowingsAndCount!
  getVendor(vendorId: String!): Vendor!
  getVendorFollowers(vendorId: String!): FollowingsAndCount!
  getVendors: [Vendor!]!
  order(id: Int!): Order!
  orders: [Order!]!
  paymentMethod(id: Int!): PaymentMethod!
}

"""Role Enum"""
enum Role {
  SUPER_ADMIN
  USER
  VENDOR
}

input UpdateAddressInput {
  city: String
  country: String
  id: Int!
  state: String
  userId: String
}

input UpdateCartInput {
  totalPrice: Float
}

input UpdateCategoryInput {
  description: String
  name: String
  user: String
}

input UpdateOrderInput {
  totalPrice: Float
}

input UpdatePaymentMethodInput {
  id: Int!
  method: Payment
  orderId: String
  totalPrice: Float
  userId: String
}

input UpdateProductInput {
  categoryId: String
  description: String
  discount: Float
  image: String
  price: Float
  stock: Int
  title: String
  vendorId: String
}

input UpdateUserInput {
  email: String
  password: String
  role: Role = USER
  username: String
}

input UpdateVendorInput {
  companyName: String
  contactEmail: String
  contactPhone: String
  description: String
  isApproved: Boolean
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  addresses: [Address!]!
  cart: Cart!
  createdAt: DateTime!
  email: String!
  followings: [Following!]
  id: String!
  role: Role!
  updatedAt: DateTime!
  username: String!
  vendor: Vendor!
}

type Vendor {
  companyName: String!
  contactEmail: String!
  contactPhone: String!
  createdAt: DateTime!
  description: String!
  followers: [Following!]
  id: String!
  isApproved: Boolean!
  logo: String!
  products: [Product!]!
  rating: Float!
  updatedAt: DateTime!
  user: User
}